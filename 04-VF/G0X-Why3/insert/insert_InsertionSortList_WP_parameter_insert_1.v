(* This file is generated by Why3's Coq driver *)
(* Beware! Only edit allowed sections below    *)
Require Import BuiltIn.
Require BuiltIn.
Require int.Int.
Require list.List.
Require list.Length.
Require list.Mem.
Require list.Append.
Require list.Reverse.
Require list.NumOcc.
Require list.Permut.

(* Why3 assumption *)
Definition unit := unit.

(* Why3 assumption *)
Inductive sorted: (list Z) -> Prop :=
  | Sorted_Nil : (sorted Init.Datatypes.nil)
  | Sorted_One : forall (x:Z), (sorted
      (Init.Datatypes.cons x Init.Datatypes.nil))
  | Sorted_Two : forall (x:Z) (y:Z) (l:(list Z)), (x <= y)%Z -> ((sorted
      (Init.Datatypes.cons y l)) -> (sorted
      (Init.Datatypes.cons x (Init.Datatypes.cons y l)))).

Axiom sorted_mem : forall (x:Z) (l:(list Z)), ((forall (y:Z), (list.Mem.mem y
  l) -> (x <= y)%Z) /\ (sorted l)) <-> (sorted (Init.Datatypes.cons x l)).

Axiom sorted_append : forall (l1:(list Z)) (l2:(list Z)), ((sorted l1) /\
  ((sorted l2) /\ forall (x:Z) (y:Z), (list.Mem.mem x l1) -> ((list.Mem.mem y
  l2) -> (x <= y)%Z))) <-> (sorted (Init.Datatypes.app l1 l2)).

(* Why3 goal *)
Theorem WP_parameter_insert : forall (x:Z) (l:(list Z)), (sorted l) ->
  match l with
  | Init.Datatypes.nil => let result :=
      (Init.Datatypes.cons x Init.Datatypes.nil) in ((sorted result) /\
      (list.Permut.permut result (Init.Datatypes.cons x l)))
  | (Init.Datatypes.cons y l') => ((x <= y)%Z -> let result :=
      (Init.Datatypes.cons x l) in ((sorted result) /\ (list.Permut.permut
      result (Init.Datatypes.cons x l)))) /\ ((~ (x <= y)%Z) -> ((sorted
      l') /\ forall (o:(list Z)), ((sorted o) /\ (list.Permut.permut o
      (Init.Datatypes.cons x l'))) -> let result :=
      (Init.Datatypes.cons y o) in ((sorted result) /\ (list.Permut.permut
      result (Init.Datatypes.cons x l)))))
  end.
intros x l h1.

Qed.


(* This file is generated by Why3's Coq driver *)
(* Beware! Only edit allowed sections below    *)
Require Import BuiltIn.
Require BuiltIn.
Require list.List.
Require list.Length.
Require int.Int.
Require list.Mem.
Require list.Append.
Require list.Reverse.

(* Why3 assumption *)
Fixpoint infix_plpl {a:Type} {a_WT:WhyType a} (l1:(list a))
  (l2:(list a)) {struct l1}: (list a) :=
  match l1 with
  | Init.Datatypes.nil => l2
  | (Init.Datatypes.cons x1 r1) => (Init.Datatypes.cons x1 (infix_plpl r1
      l2))
  end.

Axiom app_nil : forall {a:Type} {a_WT:WhyType a}, forall (l:(list a)),
  ((infix_plpl l Init.Datatypes.nil) = l).

(* Why3 assumption *)
Fixpoint length {a:Type} {a_WT:WhyType a} (l:(list a)) {struct l}: Z :=
  match l with
  | Init.Datatypes.nil => 0%Z
  | (Init.Datatypes.cons _ r) => (1%Z + (length r))%Z
  end.

(* Why3 goal *)
Theorem app_length : forall {a:Type} {a_WT:WhyType a}, forall (l1:(list a))
  (l2:(list a)), ((length (infix_plpl l1
  l2)) = ((length l1) + (length l2))%Z).
(* Why3 intros a a_WT l1 l2. *)
intros a a_WT l1 l2.
induction l1.
simpl.

Qed.

